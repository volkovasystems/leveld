"use strict";

/*;
              	@test-license:
              		The MIT License (MIT)
              		@mit-license
              
              		Copyright (@c) 2017 Richeve Siodina Bebedor
              		@email: richeve.bebedor@gmail.com
              
              		Permission is hereby granted, free of charge, to any person obtaining a copy
              		of this software and associated documentation files (the "Software"), to deal
              		in the Software without restriction, including without limitation the rights
              		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
              		copies of the Software, and to permit persons to whom the Software is
              		furnished to do so, subject to the following conditions:
              
              		The above copyright notice and this permission notice shall be included in all
              		copies or substantial portions of the Software.
              
              		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
              		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
              		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
              		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
              		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
              		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
              		SOFTWARE.
              	@end-test-license
              
              	@test-configuration:
              		{
              			"package": "leveld",
              			"path": "leveld/test.module.js",
              			"file": "test.module.js",
              			"module": "test",
              			"author": "Richeve S. Bebedor",
              			"eMail": "richeve.bebedor@gmail.com",
              			"contributors": [
              				"John Lenon Maghanoy <johnlenonmaghanoy@gmail.com>",
              				"Vinse Vinalon <vinsevinalon@gmail.com>"
              			],
              			"repository": "https://github.com/volkovasystems/leveld.git"
              		}
              	@end-test-configuration
              
              	@test-documentation:
              
              	@end-test-documentation
              
              	@include:
              		{
              			"assert": "should",
              			"leveld": "leveld"
              		}
              	@end-include
              */

var assert = require("should");





//: @bridge:
var path = require("path");
//: @end-bridge





//: @bridge:

describe("leveld", function () {

	var testBridge = path.resolve(__dirname, "bridge.html");
	var bridgeURL = "file://" + testBridge;

	describe("leveld", function () {

		describe("`leveld( [ [ [ 1 ] ] ], 2 )`", function () {
			it("should be equal to [ [ 1 ] ]", function () {
				var result = browser.url(bridgeURL).execute(function () {return leveld([[[1]]], 2);});
				assert.deepEqual(result.value, [[1]]);
			});
		});

		describe("`leveld( [ [ [ 1 ] ] ], 3 )`", function () {
			it("should be equal to [ 1 ]", function () {
				var result = browser.url(bridgeURL).execute(function () {return leveld([[[1]]], 3);});
				assert.deepEqual(result.value, [1]);
			});
		});

		describe("`leveld( [[[[1,2,3],[[[4,5,6]]]]]], 2 )`", function () {
			it("should return [ [ [ 1, 2, 3 ],[ [ [ 4, 5, 6 ] ] ] ] ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[[[1, 2, 3], [[[4, 5, 6]]]]]], 2);});
				assert.deepEqual(result.value, [[[1, 2, 3], [[[4, 5, 6]]]]]);

			});
		});

		describe("`leveld( [[[[1,2,3],[[[4,5,6]]]]]], 3 )`", function () {
			it("should return [ [ 1, 2, 3 ], [ [ [ 4,5,6 ] ] ] ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[[[1, 2, 3], [[[4, 5, 6]]]]]], 3);});
				assert.deepEqual(result.value, [[1, 2, 3], [[[4, 5, 6]]]]);

			});
		});

		describe("`leveld( [[[[1,2,3],[[[4,5,6]]]]]], 4 )`", function () {
			it("should return [ 1, 2, 3, [ [ 4, 5, 6 ] ] ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[[[1, 2, 3], [[[4, 5, 6]]]]]], 4);});
				assert.deepEqual(result.value, [1, 2, 3, [[4, 5, 6]]]);

			});
		});

		describe("`leveld( [[[[1,2,3],[[[4,5,6]]]]]], 5 )`", function () {
			it("should return [ 1, 2, 3, [ 4, 5, 6 ] ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[[[1, 2, 3], [[[4, 5, 6]]]]]], 5);});
				assert.deepEqual(result.value, [1, 2, 3, [4, 5, 6]]);

			});
		});

		describe("`leveld( [[[[1,2,3],[[[4,5,6]]]]]], 6 )`", function () {
			it("should return [ 1, 2, 3, 4, 5, 6 ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[[[1, 2, 3], [[[4, 5, 6]]]]]], 6);});
				assert.deepEqual(result.value, [1, 2, 3, 4, 5, 6]);

			});
		});

		describe("`leveld( [[[[1,2,3],[[[4,5,6]]]]]], 7 )`", function () {
			it("should return [ 1, 2, 3, 4, 5, 6 ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[[[1, 2, 3], [[[4, 5, 6]]]]]], 7);});
				assert.deepEqual(result.value, [1, 2, 3, 4, 5, 6]);

			});
		});

		describe("`leveld( [[[[1,2,3],[[[4,5,6]]]]]] )`", function () {
			it("should return [ [ [ 1, 2, 3 ],[ [ [ 4, 5, 6 ] ] ] ] ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[[[1, 2, 3], [[[4, 5, 6]]]]]]);});
				assert.deepEqual(result.value, [[[1, 2, 3], [[[4, 5, 6]]]]]);

			});
		});

		describe("`leveld( [[[[1,2,3],[[[4,5,6]]]]]], Infinity )`", function () {
			it("should return [ 1, 2, 3, 4, 5, 6 ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[[[1, 2, 3], [[[4, 5, 6]]]]]], Infinity);});
				assert.deepEqual(result.value, [1, 2, 3, 4, 5, 6]);

			});
		});

		describe("`leveld( [[1,2,3],[3,4,5]], 2 )`", function () {
			it("should return [ 1, 2, 3, 3, 4, 5 ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[1, 2, 3], [3, 4, 5]], 2);});
				assert.deepEqual(result.value, [1, 2, 3, 3, 4, 5]);

			});
		});

		describe("`leveld( [[[1,2,3],[3,4,5]],[4,5,6]], 2 )`", function () {
			it("should return [ [ 1, 2, 3 ], [ 3, 4, 5 ], 4, 5, 6 ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[[1, 2, 3], [3, 4, 5]], [4, 5, 6]], 2);});
				assert.deepEqual(result.value, [[1, 2, 3], [3, 4, 5], 4, 5, 6]);

			});
		});

		describe("`leveld( [[1,2,3],[3,4,5]] )`", function () {
			it("should return [ 1, 2, 3, 3, 4, 5 ]", function () {

				var result = browser.url(bridgeURL).execute(function () {return leveld([[1, 2, 3], [3, 4, 5]]);});
				assert.deepEqual(result.value, [1, 2, 3, 3, 4, 5]);

			});
		});

	});

});

//: @end-bridge
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=test.bridge.js.map
